// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "message.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType as MessageType$ } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Group
 */
export interface Group {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * @generated from protobuf field: string name = 2;
   */
  name: string;
}
/**
 * @generated from protobuf message MessageReponse
 */
export interface MessageReponse {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * @generated from protobuf field: string sender = 2;
   */
  sender: string;
  /**
   * @generated from protobuf field: string receiver = 3;
   */
  receiver: string;
  /**
   * @generated from protobuf field: Group group = 4;
   */
  group?: Group;
  /**
   * @generated from protobuf field: string createAt = 5;
   */
  createAt: string;
  /**
   * @generated from protobuf field: string content = 6;
   */
  content: string;
  /**
   * @generated from protobuf field: MessageType type = 7;
   */
  type: MessageType;
}
/**
 * @generated from protobuf message MessageRequest
 */
export interface MessageRequest {
  /**
   * @generated from protobuf field: string receiver = 1;
   */
  receiver: string;
  /**
   * @generated from protobuf field: Group group = 2;
   */
  group?: Group;
  /**
   * @generated from protobuf field: string content = 3;
   */
  content: string;
  /**
   * @generated from protobuf field: MessageType type = 4;
   */
  type: MessageType;
}
/**
 * @generated from protobuf enum MessageType
 */
export enum MessageType {
  /**
   * @generated from protobuf enum value: TEXT = 0;
   */
  TEXT = 0,
  /**
   * @generated from protobuf enum value: IMAGE = 1;
   */
  IMAGE = 1,
  /**
   * @generated from protobuf enum value: FILE = 2;
   */
  FILE = 2,
}
// @generated message type with reflection information, may provide speed optimized methods
class Group$Type extends MessageType$<Group> {
  constructor() {
    super("Group", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<Group>): Group {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.id = "";
    message.name = "";
    if (value !== undefined)
      reflectionMergePartial<Group>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Group,
  ): Group {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* string name */ 2:
          message.name = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Group,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* string name = 2; */
    if (message.name !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.name);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message Group
 */
export const Group = new Group$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageReponse$Type extends MessageType$<MessageReponse> {
  constructor() {
    super("MessageReponse", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "receiver", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: "group", kind: "message", T: () => Group },
      { no: 5, name: "createAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 7,
        name: "type",
        kind: "enum",
        T: () => ["MessageType", MessageType],
      },
    ]);
  }
  create(value?: PartialMessage<MessageReponse>): MessageReponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.id = "";
    message.sender = "";
    message.receiver = "";
    message.createAt = "";
    message.content = "";
    message.type = 0;
    if (value !== undefined)
      reflectionMergePartial<MessageReponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MessageReponse,
  ): MessageReponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* string sender */ 2:
          message.sender = reader.string();
          break;
        case /* string receiver */ 3:
          message.receiver = reader.string();
          break;
        case /* Group group */ 4:
          message.group = Group.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.group,
          );
          break;
        case /* string createAt */ 5:
          message.createAt = reader.string();
          break;
        case /* string content */ 6:
          message.content = reader.string();
          break;
        case /* MessageType type */ 7:
          message.type = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: MessageReponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* string sender = 2; */
    if (message.sender !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.sender);
    /* string receiver = 3; */
    if (message.receiver !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.receiver);
    /* Group group = 4; */
    if (message.group)
      Group.internalBinaryWrite(
        message.group,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string createAt = 5; */
    if (message.createAt !== "")
      writer.tag(5, WireType.LengthDelimited).string(message.createAt);
    /* string content = 6; */
    if (message.content !== "")
      writer.tag(6, WireType.LengthDelimited).string(message.content);
    /* MessageType type = 7; */
    if (message.type !== 0) writer.tag(7, WireType.Varint).int32(message.type);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message MessageReponse
 */
export const MessageReponse = new MessageReponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageRequest$Type extends MessageType$<MessageRequest> {
  constructor() {
    super("MessageRequest", [
      { no: 1, name: "receiver", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "group", kind: "message", T: () => Group },
      { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: "type",
        kind: "enum",
        T: () => ["MessageType", MessageType],
      },
    ]);
  }
  create(value?: PartialMessage<MessageRequest>): MessageRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.receiver = "";
    message.content = "";
    message.type = 0;
    if (value !== undefined)
      reflectionMergePartial<MessageRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MessageRequest,
  ): MessageRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string receiver */ 1:
          message.receiver = reader.string();
          break;
        case /* Group group */ 2:
          message.group = Group.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.group,
          );
          break;
        case /* string content */ 3:
          message.content = reader.string();
          break;
        case /* MessageType type */ 4:
          message.type = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: MessageRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string receiver = 1; */
    if (message.receiver !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.receiver);
    /* Group group = 2; */
    if (message.group)
      Group.internalBinaryWrite(
        message.group,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string content = 3; */
    if (message.content !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.content);
    /* MessageType type = 4; */
    if (message.type !== 0) writer.tag(4, WireType.Varint).int32(message.type);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message MessageRequest
 */
export const MessageRequest = new MessageRequest$Type();
